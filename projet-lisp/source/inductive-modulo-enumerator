(defclass inductive-modulo-enumerator (inductive-enumerator)
  ((mod-fun :initarg :mod-fun
    :reader mod-fun)))

(defmethod init-enumerator :after ((e mod-inductive-enumerator))
  (setf (current-value e)
    (funcall
    (mod-fun e)
    (current-value e))))

(defmethod next-element :after ((e mod-inductive-enumerator))
  (setf (current-value e)
    (funcall
    (mod-fun e)
    (current-value e))))

(defun make-inductive-modulo-enumerator (initial-value fun mod-fun &optional current-value)
  (unless current-value
    (setf current-value initial-value))
  (make-instance
  â€™inductive-modulo-enumerator
  :fun fun
  :mod-fun mod-fun
  :initial-value initial-value
  :current-value current-value))